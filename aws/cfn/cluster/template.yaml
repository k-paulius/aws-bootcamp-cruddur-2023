AWSTemplateFormatVersion: 2010-09-09
Description: 'Cluster and networking setup for Cruddur application'

Parameters:

  pAppId:
    Description: Application ID
    Type: String
    Default: cruddur

  pAppEnvironment:
    Description: Application environment (e.g. dev, prod)
    Type: String

  pFrontEndApplicationPort:
    Description: 'Port front-end application is listening on'
    Type: Number
    Default: 3000

  pBackEndApplicationPort:
    Description: 'Port back-end application is listening on'
    Type: Number
    Default: 4567

  pAppDomainName:
    Description: 'SSM Parameter that holds applications domain name'
    Type: AWS::SSM::Parameter::Value<String>

  pParentVPCStack:
    Description: 'SSM Parameter that holds stack name of the parent VPC stack'
    Type: AWS::SSM::Parameter::Value<String>

  pDNSStackName:
    Description: 'SSM Parameter that holds stack name of the parent DNS stack'
    Type: AWS::SSM::Parameter::Value<String>

Resources:

  rFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${pAppId}-${pAppEnvironment}-fargate-cluster'
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          # KmsKeyId
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: !Sub ${pAppId}-${pAppEnvironment}

  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${pAppId}-${pAppEnvironment}-alb'
      Type: application
      IpAddressType: dualstack
      Scheme: internet-facing
      SecurityGroups:
        - !Ref rLoadBalancerSecurityGroup
      Subnets:
        !Split [',', {'Fn::ImportValue': !Sub '${pParentVPCStack}-PublicSubnets'}]
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: false
        - Key: ipv6.deny_all_igw_traffic
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: defensive
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
        - Key: routing.http.preserve_host_header.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true

  rLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Public facing SG for ${pAppId}-${pAppEnvironment}-alb'
      GroupName: !Sub '${pAppId}-${pAppEnvironment}-alb-sg'
      VpcId: {'Fn::ImportValue': !Sub '${pParentVPCStack}-VPCId'}

  rLoadBalancerSecurityGroupInHttpFromWorldIPv4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref rLoadBalancerSecurityGroup
      Description: 'Allow IPv4 TCP from Internet to ALB on Port 80'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'

  rLoadBalancerSecurityGroupInHttpFromWorldIPv6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref rLoadBalancerSecurityGroup
      Description: 'Allow IPv6 TCP from Internet to ALB on Port 80'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIpv6: '::/0'

  rLoadBalancerSecurityGroupInHttpsFromWorldIPv4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref rLoadBalancerSecurityGroup
      Description: 'Allow IPv4 TCP from Internet to ALB on Port 443'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'

  rLoadBalancerSecurityGroupInHttpsFromWorldIPv6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref rLoadBalancerSecurityGroup
      Description: 'Allow IPv6 TCP from Internet to ALB on Port 443'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIpv6: '::/0'

  rHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref rLoadBalancer
      DefaultActions:
        # redirect HTTP traffic to HTTPS
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: "HTTP_301"

  rHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      LoadBalancerArn: !Ref rLoadBalancer
      Certificates:
        - CertificateArn: {'Fn::ImportValue': !Sub '${pDNSStackName}-CertificateArn'}
      SslPolicy: 'ELBSecurityPolicy-TLS13-1-2-2021-06'
      DefaultActions:
        - Type: forward
          TargetGroupArn:  !Ref rFrontendTargetGroup

  rHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref rHTTPSListener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref rBackendTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'api.${pAppDomainName}'

  rFrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${pAppId}-${pAppEnvironment}-frontend-tg'
      Protocol: HTTP
      ProtocolVersion: HTTP2
      IpAddressType: ipv4
      Port: !Ref pFrontEndApplicationPort
      VpcId: {'Fn::ImportValue': !Sub '${pParentVPCStack}-VPCId'}
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
        - Key: load_balancing.cross_zone.enabled
          Value: use_load_balancer_configuration
      # HealthCheck
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'

  rBackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${pAppId}-${pAppEnvironment}-backend-tg'
      Protocol: HTTP
      ProtocolVersion: HTTP2
      IpAddressType: ipv4
      Port: !Ref pBackEndApplicationPort
      VpcId: {'Fn::ImportValue': !Sub '${pParentVPCStack}-VPCId'}
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
        - Key: load_balancing.cross_zone.enabled
          Value: use_load_balancer_configuration
      # HealthCheck
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckProtocol: HTTP
      HealthCheckPath: /api/health-check
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'

Outputs:

  oClusterArn:
    Description: 'ARN of the Amazon ECS cluster'
    Value: !GetAtt rFargateCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  oBackendTargetGroupArn:
    Description: 'ARN of the Backend target group'
    Value: !GetAtt rBackendTargetGroup.TargetGroupArn
    Export:
      Name: !Sub '${AWS::StackName}-BackendTargetGroupArn'

  oLoadBalancerSecurityGroupId:
    Description: 'The GroupId of the VPC security group assigned to the ALB'
    Value: !GetAtt rLoadBalancerSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-ALBSecurityGroupId'
