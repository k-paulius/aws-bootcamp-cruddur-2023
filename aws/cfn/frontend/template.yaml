AWSTemplateFormatVersion: 2010-09-09
Description: 'Frontend setup for Cruddur application'

Parameters:

  pAppId:
    Description: Application ID
    Type: String
    Default: cruddur

  pAppEnvironment:
    Description: Application environment (e.g. dev, prod)
    Type: String

  pDNSStackName:
    Description: 'SSM Parameter that holds stack name of the parent DNS stack'
    Type: AWS::SSM::Parameter::Value<String>

Resources:

  rPrimaryDomainBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: {'Fn::ImportValue': !Sub '${pDNSStackName}-HostedZoneName'}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  rWWWSubdomainBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'www.${rPrimaryDomainBucket}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref rPrimaryDomainBucket
          Protocol: https

  rPrimaryDomainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rPrimaryDomainBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${rPrimaryDomainBucket.Arn}/*'
            Condition:
              ArnEquals:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${rDistribution}'

  rWWWSubdomainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rWWWSubdomainBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${rWWWSubdomainBucket.Arn}/*'
            Condition:
              ArnEquals:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${rDistribution}'

  rOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${rPrimaryDomainBucket}-origin-access-control'
        Description: !Sub '${rPrimaryDomainBucket} Origin Access Control'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  rDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub '${pAppId}-${pAppEnvironment} Frontend'
        Enabled: true
        Aliases:
          - !Ref rPrimaryDomainBucket
          - !Ref rWWWSubdomainBucket
        DefaultCacheBehavior:
          TargetOriginId: S3PrimaryDomainBucketOrigin
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          # CachingOptimized AWS managed policy
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
          # AllViewerExceptHostHeader AWS managed policy
          OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac'
          # SecurityHeadersPolicy AWS managed policy
          ResponseHeadersPolicyId: '67f7725c-6f97-4210-82d7-5512b31e9d03'
        DefaultRootObject: index.html
        HttpVersion: http2and3
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt rPrimaryDomainBucket.RegionalDomainName
            Id: S3PrimaryDomainBucketOrigin
            OriginAccessControlId: !Ref rOriginAccessControl
            S3OriginConfig: {}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: {'Fn::ImportValue': !Sub '${pDNSStackName}-CertificateArn'}
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  rPrimaryDomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${pDNSStackName}-HostedZoneId'}
      RecordSets:
        - Name: !Ref rPrimaryDomainBucket
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt rDistribution.DomainName
        - Name: !Ref rPrimaryDomainBucket
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt rDistribution.DomainName

  rWWWSubdomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${pDNSStackName}-HostedZoneId'}
      RecordSets:
        - Name: !Ref rWWWSubdomainBucket
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt rDistribution.DomainName
        - Name: !Ref rWWWSubdomainBucket
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt rDistribution.DomainName
